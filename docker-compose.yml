version: '3.6'

services:
  multicraft:
    build: ./game_service/docker/
    container_name: prismo
    restart: always
    image: smk781/mtmod_dev_setup
    entrypoint: "/usr/local/bin/multicraftserver --world /var/lib/multicraft/worlds/prismo --config /multicraft.conf"
    user: root
    volumes:
      - "./game_service/mods:/var/lib/multicraft/worlds/prismo/worldmods"
      - "./game_service/test/world.mt:/var/lib/multicraft/worlds/prismo/world.mt"
      - "./game_service/test/multicraft.conf:/multicraft.conf"
      - "prismo:/var/lib/multicraft/worlds/prismo"
    ports:
      - "30000:30000/udp"
    depends_on:
      gamedb:
        condition: service_healthy
    links:
      - gamedb
      - backend
    networks:
      - shared_network
  
  backend:
    build:
      context: ./rest_service
      dockerfile: Dockerfile
    container_name: flask_backend
    restart: always
    environment:
      - FLASK_DEBUG=1
    volumes:
      - "./rest_service/:/mt_backend"
    expose:
      - "8050"
    ports:
      - "3001:8050"
    networks:
      - shared_network

  frontend:
    build: ./web_service/
    container_name: react_frontend
    restart: always
    volumes:
      - "./web_service/src:/mt_frontend/src"
    ports:
      - "3000:3000"
    links:
      - backend
    networks:
      - shared_network
  
  gamedb:
    container_name: postgres_gamedb
    image: postgres
    environment:
      POSTGRES_PASSWORD: "admin"
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
      TZ: "Asia/Kolkata"
    volumes:
      # - "./db/:/var/lib/postgresql/data/"
      # init scripts for db creation
      - "./gamedb/initdb/:/docker-entrypoint-initdb.d/"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U smk -d smk_mc2"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - shared_network

networks:
  shared_network:
    driver: bridge

volumes:
  prismo: {}
  mt_backend: {}
  mt_frontend: {}